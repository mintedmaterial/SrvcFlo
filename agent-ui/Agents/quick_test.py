#!/usr/bin/env python3
"""
Quick test for ServiceFlow AI agents - simplified version
"""

import asyncio
import os
from dotenv import load_dotenv

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path=dotenv_path)

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.storage.sqlite import SqliteStorage
from agno.tools.duckduckgo import DuckDuckGoTools
from pathlib import Path

# Setup paths
cwd = Path(__file__).parent
tmp_dir = cwd.joinpath("tmp")
tmp_dir.mkdir(parents=True, exist_ok=True)

# Simplified SrvcFlo agent for testing
srvcflo_test_agent = Agent(
    name="SrvcFlo (Test)",
    model=OpenAIChat(id="gpt-4o-mini"),
    tools=[DuckDuckGoTools()],
    description="AI mastermind behind ServiceFlow AI - Test Version",
    instructions="""
    You are SrvcFlo, the AI lead of ServiceFlow AI. Your creator built you to revolutionize 
    how service businesses operate through intelligent automation.

    For this test, create viral blog content about service business automation.
    
    Key Focus Areas:
    - Emergency call automation for contractors
    - Scheduling solutions for service businesses  
    - Lead capture and conversion
    - ROI and business transformation stories
    
    Always drive towards ServiceFlow AI waitlist signups with compelling CTAs.
    """,
    storage=SqliteStorage(
        table_name="srvcflo_test_sessions",
        db_file=str(tmp_dir.joinpath("srvcflo_test.db"))
    ),
    markdown=True,
)

async def test_simple_blog_creation():
    """Test simple blog creation"""
    print("🧪 Testing Simple Blog Creation with SrvcFlo...")
    
    prompt = """
    Create a viral blog post titled:
    "The $50K Mistake Every Contractor Makes: Missing Emergency Calls"
    
    Target audience: Contractors and home service providers
    
    Structure the blog post with:
    1. Attention-grabbing hook about 3 AM emergency calls
    2. The problem: missed calls = lost revenue 
    3. Statistics about service business losses
    4. The solution: AI automation with ServiceFlow AI
    5. Transformation story with specific ROI
    6. Strong CTA for waitlist signup
    
    Make it 1500-2000 words, scannable with headers, and include:
    - Specific dollar amounts 
    - Industry examples
    - Emotional connection
    - Clear value proposition
    
    End with: "Join the ServiceFlow AI waitlist today and never miss another customer."
    """
    
    try:
        response = await srvcflo_test_agent.arun(prompt)
        print("✅ Blog post created successfully!")
        
        # Save the blog post
        timestamp = os.popen('date /t').read().strip().replace('/', '-')
        filename = f"test_blog_post_{timestamp.replace(' ', '_')}.md"
        filepath = tmp_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"# Test Blog Post - Generated by SrvcFlo\n\n")
            f.write(f"**Generated on:** {timestamp}\n\n")
            f.write(response.content)
        
        print(f"📁 Blog post saved to: {filepath}")
        print(f"📊 Content length: {len(response.content)} characters")
        
        # Show preview
        preview = response.content[:500] + "..." if len(response.content) > 500 else response.content
        print(f"\n📄 Preview:\n{preview}")
        
        return response.content
        
    except Exception as e:
        print(f"❌ Blog creation failed: {e}")
        return None

async def test_social_content():
    """Test social media content creation"""
    print("\n📱 Testing Social Media Content Creation...")
    
    prompt = """
    Create social media content for this blog post:
    "The $50K Mistake Every Contractor Makes: Missing Emergency Calls"
    
    Create 4 different social media posts:
    
    1. TWITTER/X POST (280 chars max):
    Hook, problem, solution, CTA with hashtags #ServiceFlowAI #Automation #Contractors
    
    2. LINKEDIN POST (professional tone):
    Industry insight, data, business case, professional CTA
    
    3. FACEBOOK POST (community-focused):
    Story-driven, relatable, local business focus, engaging CTA
    
    4. INSTAGRAM CAPTION (with hashtags):
    Visual-friendly, transformation theme, lifestyle benefits, hashtag strategy
    
    Each post should drive traffic to ServiceFlow AI and encourage waitlist signups.
    Make them shareable and engaging for busy contractors and service business owners.
    """
    
    try:
        response = await srvcflo_test_agent.arun(prompt)
        print("✅ Social media content created!")
        
        # Save social content  
        timestamp = os.popen('date /t').read().strip().replace('/', '-')
        filename = f"test_social_content_{timestamp.replace(' ', '_')}.md"
        filepath = tmp_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"# Test Social Media Content - Generated by SrvcFlo\n\n")
            f.write(f"**Generated on:** {timestamp}\n\n")
            f.write(response.content)
        
        print(f"📁 Social content saved to: {filepath}")
        print(f"📊 Content length: {len(response.content)} characters")
        
        return response.content
        
    except Exception as e:
        print(f"❌ Social content creation failed: {e}")
        return None

async def main():
    """Run quick tests"""
    print("🚀 ServiceFlow AI Quick Test Suite")
    print("=" * 50)
    
    # Test blog creation
    blog_result = await test_simple_blog_creation()
    
    # Test social content
    social_result = await test_social_content()
    
    print("\n" + "=" * 50)
    print("🎉 Quick Test Complete!")
    print(f"✅ Blog Creation: {'PASSED' if blog_result else 'FAILED'}")
    print(f"✅ Social Content: {'PASSED' if social_result else 'FAILED'}")
    
    if blog_result and social_result:
        print("\n🚀 Basic functionality working! Ready for full agent testing.")
        print(f"\nGenerated files saved in: {tmp_dir}")
        print("\nNext steps:")
        print("1. Review generated content in tmp/ folder")
        print("2. Test the playground: python playground.py") 
        print("3. Deploy to Cloudflare Workers")
    else:
        print("\n⚠️ Some tests failed. Check OpenAI API key and network connection.")

if __name__ == "__main__":
    asyncio.run(main())