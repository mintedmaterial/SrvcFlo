#!/usr/bin/env python3
"""
Simple test for ServiceFlow AI agent - no special characters
"""

import asyncio
import os
from dotenv import load_dotenv

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path=dotenv_path)

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.storage.sqlite import SqliteStorage
from pathlib import Path

# Setup paths
cwd = Path(__file__).parent
tmp_dir = cwd.joinpath("tmp")
tmp_dir.mkdir(parents=True, exist_ok=True)

# Simple SrvcFlo agent for testing
srvcflo_agent = Agent(
    name="SrvcFlo Test Agent",
    model=OpenAIChat(id="gpt-4o-mini"),
    description="AI mastermind behind ServiceFlow AI - Test Version",
    instructions="""
    You are SrvcFlo, the AI lead of ServiceFlow AI. Create viral blog content 
    about service business automation.

    Focus on:
    - Emergency call automation for contractors
    - Scheduling solutions for service businesses  
    - Lead capture and conversion
    - ROI and business transformation stories
    
    Always drive towards ServiceFlow AI waitlist signups.
    """,
    storage=SqliteStorage(
        table_name="srvcflo_test",
        db_file=str(tmp_dir.joinpath("test.db"))
    ),
    markdown=True,
)

async def test_blog_creation():
    """Test blog creation"""
    print("Testing Blog Creation with SrvcFlo...")
    
    prompt = """
    Create a viral blog post titled:
    "The $50K Mistake Every Contractor Makes: Missing Emergency Calls"
    
    Include:
    1. Hook about 3 AM emergency calls
    2. The problem: missed calls = lost revenue 
    3. Statistics about service business losses
    4. AI automation solution
    5. ROI transformation story
    6. CTA for ServiceFlow AI waitlist
    
    Make it 1500 words, scannable with headers.
    """
    
    try:
        response = await srvcflo_agent.arun(prompt)
        print("SUCCESS: Blog post created!")
        
        # Save the blog post
        filename = "test_blog_post.md"
        filepath = tmp_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("# Test Blog Post - Generated by SrvcFlo\n\n")
            f.write(response.content)
        
        print(f"Blog post saved to: {filepath}")
        print(f"Content length: {len(response.content)} characters")
        
        # Show preview
        preview = response.content[:300] + "..." if len(response.content) > 300 else response.content
        print(f"\nPreview:\n{preview}")
        
        return True
        
    except Exception as e:
        print(f"FAILED: Blog creation error: {e}")
        return False

async def main():
    """Run test"""
    print("ServiceFlow AI Agent Test")
    print("=" * 40)
    
    # Test blog creation
    blog_success = await test_blog_creation()
    
    print("\n" + "=" * 40)
    print("Test Complete!")
    print(f"Blog Creation: {'PASSED' if blog_success else 'FAILED'}")
    
    if blog_success:
        print("\nAgent is working! Check tmp/ folder for generated content.")
        print("Next: Run the playground or deploy to production.")
    else:
        print("\nAgent test failed. Check OpenAI API key in .env file.")

if __name__ == "__main__":
    asyncio.run(main())