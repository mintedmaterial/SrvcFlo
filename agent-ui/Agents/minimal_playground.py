#!/usr/bin/env python3
"""
Minimal ServiceFlow AI Playground - Testing version
Simplified playground to test agent serving functionality
"""

import os
import logging
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.playground import Playground
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.storage.sqlite import SqliteStorage

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
dotenv_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=dotenv_path)

# Ensure tmp directory exists
tmp_dir = Path(__file__).parent / "tmp" / "discord_agents"
tmp_dir.mkdir(parents=True, exist_ok=True)

def create_simple_content_agent():
    """Create a simple content creation agent"""
    
    def create_simple_blog_post(topic: str) -> str:
        """Create a simple blog post"""
        return f"""# {topic}

This is a blog post about {topic} created by ServiceFlow AI.

## Introduction
{topic} is an important topic in today's digital landscape.

## Key Points
- Point 1 about {topic}
- Point 2 about {topic}  
- Point 3 about {topic}

## Conclusion
Understanding {topic} is crucial for business success.

Generated by ServiceFlow AI Content Agent"""

    return Agent(
        name="Simple Content Agent",
        model=OpenAIChat(id="gpt-4o"),
        tools=[create_simple_blog_post, DuckDuckGoTools()],
        instructions=[
            "You are a content creation specialist for ServiceFlow AI.",
            "Create blog posts and content about business automation and AI.",
            "Use the create_simple_blog_post tool to generate content.",
            "Focus on practical, actionable advice for small businesses."
        ],
        storage=SqliteStorage(
            table_name="simple_content_agent",
            db_file=str(tmp_dir / "simple_content.db")
        ),
        markdown=True,
        monitoring=True,
    )

def create_simple_research_agent():
    """Create a simple research agent"""
    
    def research_topic(topic: str) -> str:
        """Research a topic using web search"""
        return f"Research results for '{topic}':\n\n1. Current trends in {topic}\n2. Best practices for {topic}\n3. Market analysis of {topic}\n4. Future predictions for {topic}\n\nGenerated by ServiceFlow AI Research Agent"

    return Agent(
        name="Simple Research Agent", 
        model=OpenAIChat(id="gpt-4o"),
        tools=[research_topic, DuckDuckGoTools()],
        instructions=[
            "You are a research specialist for ServiceFlow AI.",
            "Research topics related to business automation, AI, and technology.",
            "Provide comprehensive analysis and insights.",
            "Focus on actionable information for business decision-making."
        ],
        storage=SqliteStorage(
            table_name="simple_research_agent",
            db_file=str(tmp_dir / "simple_research.db")
        ),
        markdown=True,
        monitoring=True,
    )

def create_minimal_playground():
    """Create minimal playground with just essential agents"""
    try:
        logger.info("Creating minimal playground...")
        
        # Create minimal agent list
        agents = [
            create_simple_content_agent(),
            create_simple_research_agent()
        ]
        
        logger.info(f"Created {len(agents)} agents")
        
        # Create playground
        playground_app = Playground(
            agents=agents,
            name="ServiceFlow AI Minimal Command Center",
            description="Minimal ServiceFlow AI playground for testing agent functionality.",
            app_id="serviceflow-minimal"
        )
        
        logger.info("Minimal playground created successfully")
        return playground_app
        
    except Exception as e:
        logger.error(f"Failed to create minimal playground: {e}")
        raise

def main():
    """Main entry point"""
    try:
        logger.info("Starting ServiceFlow AI Minimal Playground...")
        
        # Create playground
        playground_app = create_minimal_playground()
        
        logger.info(f"Playground ready with {len(playground_app.agents)} agents:")
        for agent in playground_app.agents:
            logger.info(f"  - {agent.name}")
        
        # Start serving
        logger.info("Starting playground server...")
        playground_app.serve("minimal_playground:app", reload=True)
        
    except Exception as e:
        logger.error(f"Failed to start minimal playground: {e}")
        raise

if __name__ == "__main__":
    main()